/*
程序名称：中国商用密码Sms4

开始时间：2011年4月28日 10:31
结束时间：2011年5月04日 19:49
*/
#include<string.h>
#include<stdio.h>

int i,j;

// in - 包含被加密明文的数组
// ink - 包含输入的加密密钥的数组
unsigned long in[32],ink[32];

//inmess -承载in数组经过Mystrcat函数返回的值
//MkValue-承载ink数组经过Mystrcat函数返回的值
//Y -承载最终的结果
unsigned long inmess[4],MkValue[4];
unsigned long Y[4];

//rk-承载轮扩展密钥的数
//X -承载Fk函数中间变量的数组
unsigned long ik[32],X[36];

//SBox数组
unsigned long SBox[16][16]=
{{0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05},
{ 0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99},
{ 0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62},
{ 0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6},
{ 0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8},
{ 0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35},
{ 0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87},
{ 0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e},
{ 0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1},
{ 0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3},
{ 0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f},
{ 0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51},
{ 0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8},
{ 0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0},
{ 0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84},
{ 0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48}};

//Ck数组
unsigned long Ck[32]=
{0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279};

//fkValue数组
unsigned long fkValue[4]={0xA3B1BAC6,0x56AA3350,0x677D9197,0xB27022DC};

//Mystrcat函数,将8个数连接为一个数
unsigned long Mystrcat(unsigned long a,unsigned long b,unsigned long c,unsigned long d,unsigned long e,unsigned long f,unsigned long g,unsigned long h)
{
unsigned long retnMystr;
retnMystr=((a<<28)&(0xf0000000))|((b<<24)&(0x0f000000))|((c<<20)&(0x00f00000))|((d<<16)&(0x000f0000))|((e<<12)&(0x0000f000))|((f<<8)&(0x00000f00))|((g<<4)&(0x000000f0))|(h&(0x0000000f));
return retnMystr; 
}

//Mystrcat2函数,将4个数连接为一个数
unsigned long Mystrcat2(unsigned long a,unsigned long b,unsigned long c,unsigned long d)
{
unsigned long retnMystr2;
retnMystr2=((a<<24)&(0xff000000))|((b<<16)&(0x00ff0000))|((c<<8)&(0x0000ff00))|(d&(0x000000ff));
return retnMystr2;
}

//extract函数，提取8位的16进制数中的任意一位
//k的取值自0到7，当k取值为0时，返回的为最高位数，当k取值为1时，返回的是次高位数，依此类推
unsigned long extract(unsigned long octalSys,int k)
{
unsigned long retnValex;
retnValex=(octalSys>>(28-k*4))&(0x0000000f);
return retnValex;
}

//CycleShift函数，实现循环移位
unsigned long CycleShift(unsigned long BValue,int k)
{ 
unsigned long retnBValCS;
if(k==2)
{
retnBValCS=((BValue<<2)&(0xfffffffc))|((BValue>>30)&0x00000003);
}
if(k==10)
{
retnBValCS=((BValue<<10)&(0xfffffc00))|((BValue>>22)&(0x000003ff));
}
if(k==13)
{
retnBValCS=((BValue<<13)&(0xffffe000))|((BValue>>19)&(0x00001fff));
}
if(k==18)
{
retnBValCS=((BValue<<18)&(0xfffc0000))|((BValue>>14)&(0x0003ffff));
}
if(k==23)
{
retnBValCS=((BValue<<23)&(0xff800000))|((BValue>>9)&(0x007fffff));
}
if(k==24)
{
retnBValCS=((BValue<<24)&(0xff000000))|((BValue>>8)&(0x00ffffff));
}
//retnBValCS=(BValue<<k)|(BValue>>(32-k));
return retnBValCS;
}

//Exchange-将32位输入由Sbox变换为32位输出的函数
unsigned long Exchange(unsigned long input)
{
//k的取值自0到7
int k;
//ex数组，承载半个字节的变量，这是一个中间变量
unsigned long ex[2];
//exr数组，承载4个字节的数，最终它将会把数传给exrslt
unsigned long exr[4];

//计算每一个8位输入经过SBox的8位输出
for(k=0;k<7;k=k+2)
{
ex[0]=extract(input,k);
ex[1]=extract(input,k+1);
exr[k/2]=SBox[ex[0]][ex[1]]; 
}

//将exr数组中的几个数赋给exrslt
unsigned long exrslt=Mystrcat2(exr[0],exr[1],exr[2],exr[3]);
return exrslt;
}

//t1函数，调用Exchange实现SBox转换，调用CycleShift实现循环左移2、10、18、24位的数据，并实现与其输入数据转换后的异或操作
unsigned long t1(unsigned long BValue)
{
BValue=Exchange(BValue);
unsigned long retnBValt1=BValue^CycleShift(BValue,2)^CycleShift(BValue,10)^CycleShift(BValue,18)^CycleShift(BValue,24);
return retnBValt1;
}

//t2函数，调用Exchange实现SBox转换，调用CycleShift实现循环左移13位和23位的数据，并实现与其输入数据转换后的异或操作
unsigned long t2(unsigned long BValue)
{
BValue=Exchange(BValue);
unsigned long retnBValt2=BValue^CycleShift(BValue,13)^CycleShift(BValue,23);
return retnBValt2;
}

//KeyExpansion-进行密钥扩展的函数
void KeyExpansion()
{
//kValue-承载中间数据的数组
unsigned long kValue[36]; 

//计算kValue[0]到kValue[3]
for(i=0;i<4;i++)
{
kValue[i]=MkValue[i]^fkValue[i]; 
}
//计算ik的32轮扩展密钥
for(i=0;i<32;i++)
{
ik[i]=kValue[i]^t2((kValue[i+1]^kValue[i+2]^kValue[i+3]^Ck[i]));
kValue[i+4]=ik[i];
}
}

//Fk-32轮函数
void Fk()
{
//将输入的密钥赋给X[0][0]~[3]
X[0]=inmess[0];
X[1]=inmess[1];
X[2]=inmess[2];
X[3]=inmess[3];
for(i=0;i<32;i++)
{
X[i+4]=X[i]^t1((X[i+1]^X[i+2]^X[i+3]^ik[i]));	
}
}


void main()
{
//数组 temp 保存明文.
//数组 temp2 保存key.
unsigned long temp[32]={0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0xf,0xe,0xd,0xc,0xb,0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0};
unsigned long temp2[32]={0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0xf,0xe,0xd,0xc,0xb,0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0};

/*输出要加密的明文和密钥*/
printf("The Message I want to encrypt:\n");
printf("01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10\n");

printf("The Key I use to encrypt:\n");
printf("01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10\n");
/*输入明文放到temp数组
printf("Please input the Message you want to encrypt:\n");

for(i=0;i<32;i++)
{
scanf("%c",&temp[i]); 
}
printf("\n");
*/
/*将输入的明文放到in数组中*/
for(i=0;i<32;i++)
{
in[i]=temp[i]&(0x0000000f);
}

/*输入加密密钥放到temp2数组
printf("Please input the Key:\n");
printf("\n");
for(i=0;i<33;i++)
{
scanf("%c",&temp2[i]);
}
*/
/*将输入的密钥放到ink数组中*/
for(i=0;i<32;i++)
{
ink[i]=temp2[i]&(0x0000000f);
}

/*
for(i=0;i<32;i++)
{
printf("%c",ink[i]);
}
*/
printf("\n");

//找到MkValue数组的值，调用Mystrcat函数，将输入的密钥数组32个数连接为4个数
for(i=0;i<4;i++)
{
MkValue[i]=Mystrcat (ink[8*i],ink[8*i+1],ink[8*i+2],ink[8*i+3],ink[8*i+4],ink[8*i+5],ink[8*i+6],ink[8*i+7]); 
}

//找到inmess数组的值，调用Mystrcat函数，将输入的明文数组32个数连接为4个数
for(i=0;i<4;i++)
{
inmess[i]=Mystrcat(in[i*8],in[i*8+1],in[i*8+2],in[i*8+3],in[i*8+4],in[i*8+5],in[i*8+6],in[i*8+7]); 
}

/*调用KeyExpansion函数生成ik数组*/
KeyExpansion();

/*调用Fk函数，完成32轮加密*/
Fk();

/*将X[32][0]~[3]里的数据放入到Y数组内*/
Y[0]=X[35];
Y[1]=X[34];
Y[2]=X[33];
Y[3]=X[32];
printf("The cipher text are:\n");
/*输出结果*/
for(i=0;i<4;i++)
{
printf("%0x",Y[i]);
printf("\n");
}
}
